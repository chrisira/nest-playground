var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.784,1,3.06,2,1.458,3,0.528,4,0.454,5,0.454,6,3.32,7,0.646,8,0.039,9,0.967,10,2.628,11,3.32,12,0.528,13,0.026,14,2.22,15,1.787,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.835,2,1.449,3,0.383,4,0.33,5,0.33,7,0.696,8,0.039,9,0.702,10,2.621,11,2.411,12,0.383,13,0.019,16,0.026,17,0.026,18,1.653,19,3.591,20,1.298,21,1.298,22,1.612,23,1.612,24,1.298,25,2.517,26,1.612,27,2.411,28,2.411,29,2.411,30,2.621,31,2.929,32,2.358,33,2.207,34,1.612,35,1.443,36,2.928,37,2.486,38,2.928,39,2.928,40,2.928,41,2.928]],["title/injectables/AppService.html",[10,1.477,42,1.083]],["body/injectables/AppService.html",[3,0.506,4,0.436,5,0.436,7,0.506,8,0.038,9,0.928,10,2.37,12,0.506,13,0.025,16,0.031,17,0.031,42,1.739,43,2.13,44,3.185,45,0.832,46,2.37,47,5.477,48,1.142,49,3.869,50,1.906,51,1.739,52,1.906,53,3.869,54,3.869]],["title/controllers/AuthController.html",[0,1.083,55,1.858]],["body/controllers/AuthController.html",[0,1.442,2,1.442,3,0.522,4,0.449,5,0.449,7,0.641,8,0.039,9,0.957,12,0.522,13,0.026,14,2.197,15,1.769,16,0.032,17,0.032,55,3.04,56,3.286,57,2.821,58,3.991,59,2.353,60,3.286,61,3.991]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.534,3,0.417,4,0.359,5,0.359,7,0.666,8,0.039,9,0.764,12,0.417,13,0.021,16,0.027,17,0.027,18,1.725,20,1.412,21,1.412,22,1.754,23,1.754,24,1.412,25,2.628,26,2.628,30,2.743,32,1.881,33,2.337,34,1.754,35,1.57,37,1.975,55,2.96,59,2.602,60,2.623,62,2.623,63,2.623,64,2.623,65,3.186,66,2.632,67,3.186,68,2.623]],["title/injectables/AuthService.html",[42,1.083,59,1.329]],["body/injectables/AuthService.html",[3,0.361,4,0.31,5,0.31,7,0.503,8,0.039,9,0.661,12,0.361,13,0.018,15,1.222,16,0.025,17,0.025,42,1.39,43,1.518,45,0.593,46,1.895,48,1.308,50,1.895,51,2.033,52,2.183,59,1.705,66,1.71,69,2.27,70,2.875,71,3.947,72,4.43,73,2.719,74,2.27,75,2.016,76,2.758,77,2.118,78,2.118,79,1.136,80,1.538,81,3.167,82,2.758,83,2.758,84,3.847,85,3.647,86,2.746,87,2.758,88,1.949,89,2.27,90,2.27,91,2.27,92,2.27,93,2.27,94,2.719,95,2.758,96,2.27,97,1.949,98,2.758,99,3.847,100,2.758,101,2.27]],["title/classes/CreatePostDto.html",[13,0.019,102,1.65]],["body/classes/CreatePostDto.html",[3,0.164,4,0.141,5,0.141,7,0.496,8,0.039,12,0.164,13,0.017,16,0.014,17,0.014,45,0.27,48,1.334,51,1.78,79,1.497,80,1.685,101,2.885,102,1.153,103,0.556,104,3.281,105,0.886,106,1.196,107,3.119,108,2.698,109,2.698,110,3.469,111,2.698,112,2.698,113,3.505,114,1.907,115,2.698,116,3.119,117,2.003,118,2.885,119,1.868,120,3.215,121,1.254,122,1.254,123,2.594,124,2.095,125,1.254,126,1.254,127,1.953,128,1.254,129,3.151,130,1.724,131,1.724,132,2.095,133,1.254,134,1.254,135,1.254,136,2.095,137,1.936,138,2.594,139,3.505,140,2.095,141,1.254,142,1.254,143,3.151,144,3.151,145,1.724,146,1.254,147,1.254,148,2.095,149,2.095,150,3.151,151,2.095,152,2.095,153,2.095,154,2.095,155,1.254,156,1.254,157,1.724,158,3.151,159,1.254,160,3.151,161,3.151,162,1.724,163,2.095,164,2.095,165,2.095,166,2.095,167,2.095,168,1.254,169,2.885,170,2.095,171,1.254,172,1.254,173,2.095,174,2.095,175,1.254,176,1.254,177,3.151,178,1.254,179,1.254,180,1.254,181,2.698,182,1.254,183,2.095,184,2.095,185,2.173,186,2.842,187,2.477,188,2.095,189,1.032,190,1.254,191,1.032,192,2.095,193,0.618,194,1.254,195,1.254,196,0.886,197,1.481,198,1.254,199,0.886,200,2.885,201,3.31,202,0.618,203,1.254,204,2.095,205,1.254,206,1.254,207,1.254,208,1.254,209,1.254,210,1.032,211,1.907,212,1.032,213,1.254,214,1.254,215,1.481,216,1.032,217,1.254]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,127,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.459,4,0.395,5,0.395,7,0.459,8,0.038,12,0.459,13,0.029,16,0.029,17,0.029,45,0.755,48,1.336,51,1.635,79,1.336,103,1.556,104,3.538,106,2.005,117,2.005,119,2.218,127,2.804,185,3.277,187,3.198,193,1.73,197,3.538,211,3.538,215,3.538,218,2.89,219,3.511,220,3.511,221,3.511]],["title/classes/CreateUserDto.html",[13,0.019,222,1.65]],["body/classes/CreateUserDto.html",[3,0.34,4,0.292,5,0.292,7,0.34,8,0.038,12,0.34,13,0.024,16,0.024,17,0.024,45,0.559,48,1.379,51,1.946,79,1.379,80,1.475,85,4.059,88,3.031,103,1.151,106,1.635,117,2.069,162,3.036,185,3.057,186,2.607,187,3.485,189,2.138,191,2.138,193,1.28,210,3.531,222,2.03,223,4.059,224,1.836,225,3.531,226,4.289,227,2.597,228,2.597,229,2.597,230,2.597,231,2.597,232,2.597,233,2.597,234,3.688,235,3.688,236,3.688,237,3.688,238,5.122,239,2.03,240,4.669,241,3.688,242,3.688,243,3.688,244,2.597,245,3.688,246,2.597,247,3.688,248,2.597]],["title/classes/GetUsersParamDto.html",[13,0.019,249,1.65]],["body/classes/GetUsersParamDto.html",[3,0.433,4,0.373,5,0.373,7,0.637,8,0.039,12,0.433,13,0.031,16,0.028,17,0.028,45,0.712,48,0.978,79,1.437,80,1.741,86,3.329,103,1.468,106,1.93,117,1.468,118,2.726,120,2.7,137,1.324,186,3.078,193,1.632,199,2.341,201,3.585,202,1.632,239,2.679,249,2.397,250,3.585,251,3.205,252,2.726,253,4.355,254,3.312,255,3.312,256,3.585,257,3.312]],["title/classes/PatchPostDto.html",[13,0.019,258,1.858]],["body/classes/PatchPostDto.html",[3,0.437,4,0.376,5,0.376,7,0.639,8,0.038,12,0.437,13,0.028,16,0.028,17,0.028,45,0.719,48,0.986,79,0.986,86,3.339,102,1.839,103,1.481,105,2.361,106,1.941,117,1.481,119,1.941,137,1.336,157,2.75,185,2.715,193,1.646,196,2.361,200,3.606,202,1.646,239,2.411,256,3.606,258,2.715,259,3.606,260,3.606,261,4.38,262,4.38,263,4.38,264,3.341,265,3.341,266,2.75,267,2.75,268,2.75]],["title/classes/PatchUserDto.html",[13,0.019,269,1.858]],["body/classes/PatchUserDto.html",[3,0.528,4,0.454,5,0.454,7,0.646,8,0.038,12,0.528,13,0.026,16,0.032,17,0.032,103,1.787,196,2.851,222,2.22,224,2.851,260,4.064,266,3.32,269,3.06,270,3.32,271,4.936,272,3.32,273,3.32,274,3.32]],["title/controllers/PostsController.html",[0,1.083,275,1.858]],["body/controllers/PostsController.html",[0,0.766,2,0.766,3,0.277,4,0.239,5,0.239,7,0.594,8,0.039,9,0.508,12,0.277,13,0.014,14,1.166,15,0.939,16,0.021,17,0.021,45,0.456,46,1.566,48,1.126,50,1.879,51,1.378,52,1.044,57,1.498,70,2.864,77,2.1,78,2.1,79,1.126,80,1.525,102,2.625,114,2.247,117,1.69,119,2.113,123,2.617,137,1.695,202,1.044,258,2.956,267,2.617,268,2.617,275,1.97,276,1.744,277,2.119,278,3.178,279,3.178,280,3.178,281,2.119,282,3.178,283,3.178,284,2.247,285,3.178,286,4.768,287,4.238,288,3.178,289,2.119,290,2.119,291,3.178,292,2.119,293,2.119,294,2.119,295,2.617,296,2.119,297,3.178,298,3.178,299,2.617,300,2.119,301,2.119,302,1.744,303,1.744,304,2.617,305,2.617,306,1.879,307,1.744,308,3.14,309,3.14,310,1.744,311,1.744,312,1.744,313,2.119,314,2.119,315,2.119,316,2.119,317,2.119,318,2.617,319,3.178,320,2.119,321,2.119,322,2.119,323,2.119]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.565,3,0.429,4,0.37,5,0.37,7,0.674,8,0.039,9,0.787,12,0.429,13,0.021,16,0.028,17,0.028,18,1.751,20,1.455,21,1.455,22,1.807,23,1.807,24,1.455,25,2.384,26,1.807,31,3.133,32,2.373,33,2.384,34,1.807,35,1.617,37,2.035,68,2.703,275,3.004,306,2.638,307,2.703,324,2.703,325,2.703,326,3.283,327,3.283,328,3.283,329,3.283,330,3.283]],["title/injectables/PostsService.html",[42,1.083,306,1.477]],["body/injectables/PostsService.html",[3,0.389,4,0.335,5,0.335,7,0.53,8,0.039,9,0.713,12,0.389,13,0.019,14,1.637,15,1.318,16,0.026,17,0.026,42,1.465,43,1.637,45,0.64,46,1.997,48,1.197,50,1.465,51,1.666,52,1.465,70,2.538,73,2.102,74,2.448,75,1.979,77,2.231,78,2.231,79,1.197,80,1.621,81,3.336,90,2.448,94,3.661,97,2.102,107,4.075,116,4.075,295,2.448,306,1.997,331,2.448,332,3.336,333,2.974,334,4.053,335,2.974,336,2.974,337,4.075,338,4.053]],["title/injectables/UserService.html",[42,1.083,75,1.199]],["body/injectables/UserService.html",[3,0.283,4,0.243,5,0.243,7,0.505,8,0.039,9,0.518,12,0.283,13,0.025,15,0.958,16,0.021,17,0.021,42,1.166,43,1.19,45,0.465,46,1.589,48,1.14,50,1.589,51,1.655,52,1.589,59,2.206,66,1.34,70,2.644,71,1.779,73,2.28,75,1.29,77,2.125,78,2.125,79,1.14,80,1.543,86,2.393,88,3.025,89,1.779,91,1.779,92,1.779,94,3.025,96,2.656,97,1.527,137,0.864,225,3.524,239,2.644,249,2.356,251,2.839,332,3.177,339,1.779,340,3.226,341,2.656,342,3.226,343,3.226,344,3.226,345,3.226,346,2.161,347,2.161,348,2.161,349,3.177,350,2.728,351,2.161,352,3.226,353,2.656,354,3.226,355,2.161,356,3.226,357,3.226,358,2.656,359,1.779,360,1.779,361,2.161,362,2.161,363,2.161,364,2.161,365,2.161,366,3.226,367,3.226]],["title/controllers/UsersController.html",[0,1.083,368,1.858]],["body/controllers/UsersController.html",[0,0.623,2,0.623,3,0.225,4,0.194,5,0.194,7,0.574,8,0.038,9,0.413,12,0.225,13,0.011,14,0.949,15,0.764,16,0.018,17,0.018,45,0.371,46,1.336,48,0.99,50,1.652,51,0.623,52,2.037,57,1.219,70,2.695,75,1.341,77,1.846,78,2.276,79,1.357,80,1.341,114,1.219,117,1.486,119,1.685,120,2.357,130,3.131,131,3.131,137,1.756,202,0.849,216,2.233,222,2.529,239,2.936,249,2.093,251,2.848,269,2.95,274,2.233,284,1.917,299,2.233,302,1.419,303,2.233,304,2.761,305,2.233,308,2.233,309,2.233,310,1.419,311,1.419,312,1.419,318,1.419,349,3.615,350,3.364,353,2.233,359,1.419,360,1.419,368,1.681,369,1.419,370,2.712,371,3.353,372,2.712,373,1.724,374,1.724,375,1.724,376,1.724,377,2.712,378,2.712,379,2.712,380,1.724,381,2.712,382,2.712,383,2.233,384,1.724,385,2.712,386,2.712,387,2.712,388,3.803,389,1.724,390,2.712,391,2.712,392,2.712,393,1.724,394,1.724,395,1.724,396,1.724,397,3.353,398,1.419,399,3.353,400,1.724,401,1.724,402,1.724,403,1.419,404,1.724,405,1.724,406,1.724,407,1.724,408,1.724,409,1.724,410,1.724,411,1.724,412,1.724,413,1.724,414,1.724,415,1.724,416,1.724]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.534,3,0.417,4,0.359,5,0.359,7,0.666,8,0.039,9,0.764,12,0.417,13,0.021,16,0.027,17,0.027,18,1.725,20,1.412,21,1.412,22,1.754,23,1.754,24,1.412,25,2.628,26,2.628,30,2.092,32,2.467,33,2.337,34,1.754,35,1.57,37,1.975,66,2.632,75,2.348,368,2.96,398,2.623,417,2.623,418,2.623,419,2.623,420,3.186,421,3.186,422,3.186]],["title/coverage.html",[423,2.88]],["body/coverage.html",[0,1.749,1,1.748,5,0.317,6,2.321,8,0.038,10,1.389,13,0.034,16,0.025,17,0.025,24,1.249,42,1.749,44,2.321,55,1.748,56,2.321,59,1.249,69,2.321,75,1.127,79,0.833,102,1.552,104,2.761,105,2.761,119,1.249,127,1.748,197,1.993,212,2.321,218,2.321,222,1.552,223,2.321,224,2.761,249,1.552,250,2.321,251,1.748,252,2.321,258,1.748,259,2.321,269,1.748,270,2.321,275,1.748,276,2.321,284,1.993,306,1.389,331,2.321,339,2.321,341,2.321,368,1.748,369,2.321,423,1.993,424,2.321,425,2.819,426,5.836,427,4.84,428,4.483,429,4.483,430,2.321,431,2.819,432,3.907,433,2.819,434,2.819,435,2.819,436,2.819,437,2.819]],["title/dependencies.html",[21,1.596,438,2.068]],["body/dependencies.html",[8,0.039,9,0.923,13,0.031,16,0.031,17,0.031,21,1.706,193,1.896,199,2.721,202,1.896,272,3.169,273,3.169,439,3.849,440,3.849,441,5.224,442,3.849,443,3.849,444,3.849,445,3.849,446,3.849,447,3.849,448,3.849,449,3.849,450,3.849,451,3.849,452,3.849,453,3.849]],["title/miscellaneous/enumerations.html",[454,1.557,455,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.03,17,0.03,45,0.8,110,3.863,119,2.079,145,3.863,169,3.863,215,4.128,350,3.316,454,2.304,455,3.06,456,3.717,457,3.717,458,3.717,459,4.692,460,4.692,461,4.692,462,3.717,463,4.692,464,4.692]],["title/miscellaneous/functions.html",[454,1.557,465,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.474,45,0.965,430,3.694,454,2.781,465,3.694,466,4.486]],["title/index.html",[45,0.54,467,2.512,468,2.512]],["body/index.html",[4,0.213,8,0.036,16,0.019,17,0.019,35,2.248,93,3.756,120,2.478,137,0.756,138,1.557,211,1.337,337,2.4,358,1.557,383,1.557,403,3.756,423,1.337,424,2.4,469,1.892,470,1.892,471,3.558,472,2.916,473,1.892,474,1.892,475,1.892,476,1.892,477,2.916,478,3.558,479,1.892,480,1.892,481,1.892,482,3.998,483,1.892,484,4.909,485,1.892,486,4.755,487,1.892,488,1.892,489,1.892,490,2.916,491,1.892,492,2.916,493,1.892,494,3.558,495,1.892,496,1.892,497,1.892,498,1.892,499,1.892,500,1.892,501,3.998,502,4.909,503,2.916,504,1.892,505,1.892,506,1.892,507,1.892,508,2.916,509,3.998,510,1.892,511,2.916,512,1.892,513,2.916,514,4.563,515,3.998,516,1.892,517,2.916,518,1.892,519,1.892,520,1.892,521,1.892,522,3.998,523,1.892,524,1.892,525,1.892,526,1.892,527,2.916,528,1.892,529,1.892,530,1.892,531,1.892,532,1.892,533,2.916,534,1.892,535,1.892,536,1.892,537,2.916,538,1.892,539,1.892,540,3.292,541,2.916,542,1.892,543,1.892,544,1.892,545,1.892,546,1.892,547,1.892,548,1.892,549,1.892,550,2.916,551,1.892,552,1.892,553,1.892,554,1.892,555,3.558,556,1.892,557,1.892,558,1.892,559,1.892,560,1.892,561,2.916,562,1.892,563,1.892,564,1.892,565,1.892,566,1.892,567,2.916,568,1.892,569,1.892,570,1.892,571,2.916,572,2.916,573,1.892,574,1.892,575,1.892,576,1.892,577,1.892,578,1.892,579,1.892,580,1.892,581,1.892,582,1.892,583,1.892,584,1.557,585,1.892,586,1.892,587,1.892,588,1.892,589,1.892,590,1.892,591,1.557]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.583,20,1.846,30,2.053,31,2.293,32,1.846,540,4.626,592,5.619,593,5.619,594,5.619]],["title/overview.html",[595,3.355]],["body/overview.html",[2,1.088,8,0.038,10,2.285,16,0.026,17,0.026,18,1.088,19,3.547,20,1.334,21,1.334,22,1.657,23,1.657,24,1.334,25,1.657,26,1.657,27,2.478,28,2.478,29,2.478,30,2.643,31,3.02,32,2.431,33,2.249,34,1.657,35,1.483,43,1.657,59,2.431,62,2.478,63,2.478,64,2.478,75,2.194,103,1.334,306,2.285,324,2.478,325,2.478,417,2.478,418,2.478,419,2.478,595,2.478,596,4.638,597,3.009]],["title/properties.html",[106,1.596,438,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,106,1.954,137,1.763,584,3.629,591,3.629,598,4.408,599,4.408,600,4.408]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":599,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.23",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":257,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":254,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":338,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["3/4",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":596,"title":{},"body":{"overview.html":{}}}],["6",{"_index":597,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@test.com",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":528,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":577,"title":{},"body":{"index.html":{}}}],["api",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":477,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":584,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":517,"title":{},"body":{"index.html":{}}}],["backers",{"_index":578,"title":{},"body":{"index.html":{}}}],["based",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["blogpost",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["blogpost'})@apiresponse({status",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{}}}],["board",{"_index":570,"title":{},"body":{"index.html":{}}}],["body",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":594,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":592,"title":{},"body":{"modules.html":{}}}],["building",{"_index":472,"title":{},"body":{"index.html":{}}}],["business",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["channel",{"_index":543,"title":{},"body":{"index.html":{}}}],["character",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":527,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":512,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":324,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":326,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":325,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":417,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":418,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":419,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":534,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(createpostdto",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(patchpostdto",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":549,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":423,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body(new",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":102,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":127,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":222,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body(new",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["date",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":545,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":501,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":516,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":508,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":526,"title":{},"body":{"index.html":{}}}],["description",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":487,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":556,"title":{},"body":{"index.html":{}}}],["discord",{"_index":542,"title":{},"body":{"index.html":{}}}],["dive",{"_index":544,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":424,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":359,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":496,"title":{},"body":{"index.html":{}}}],["each",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":473,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":507,"title":{},"body":{"index.html":{}}}],["eight",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["endpoint",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["ensure",{"_index":505,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":560,"title":{},"body":{"index.html":{}}}],["entries",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":455,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["exists",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["experience",{"_index":547,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":260,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":520,"title":{},"body":{"index.html":{}}}],["featuredimageurl",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":530,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":522,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":356,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":332,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(userid",{"_index":334,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":345,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["firstname",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":529,"title":{},"body":{"index.html":{}}}],["follow",{"_index":564,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["fot",{"_index":262,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["framework",{"_index":471,"title":{},"body":{"index.html":{}}}],["full",{"_index":559,"title":{},"body":{"index.html":{}}}],["function",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":465,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":525,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apitags('posts",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":467,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":353,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["getusers",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":249,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["graph",{"_index":552,"title":{},"body":{"index.html":{}}}],["grow",{"_index":574,"title":{},"body":{"index.html":{}}}],["hands",{"_index":546,"title":{},"body":{"index.html":{}}}],["handy",{"_index":535,"title":{},"body":{"index.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":550,"title":{},"body":{"index.html":{}}}],["here",{"_index":582,"title":{},"body":{"index.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":588,"title":{},"body":{"index.html":{}}}],["id",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["imports:[usersmodule",{"_index":330,"title":{},"body":{"modules/PostsModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":510,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":532,"title":{},"body":{"index.html":{}}}],["inject",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["install",{"_index":524,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":485,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":553,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":256,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":219,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@isemail",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@isoptional()@minlength(3)@maxlength(96",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@matches(/[a",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":567,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":569,"title":{},"body":{"index.html":{}}}],["john",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["john@test.com",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":580,"title":{},"body":{"index.html":{}}}],["json",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":585,"title":{},"body":{"index.html":{}}}],["key",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":538,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":591,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":572,"title":{},"body":{"index.html":{}}}],["limit",{"_index":349,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linkedin",{"_index":566,"title":{},"body":{"index.html":{}}}],["list",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":511,"title":{},"body":{"index.html":{}}}],["loop",{"_index":562,"title":{},"body":{"index.html":{}}}],["makes",{"_index":518,"title":{},"body":{"index.html":{}}}],["managing",{"_index":531,"title":{},"body":{"index.html":{}}}],["matches",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/[a",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":514,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["min",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minimum",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":454,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":571,"title":{},"body":{"index.html":{}}}],["mode",{"_index":490,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":509,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":586,"title":{},"body":{"index.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":557,"title":{},"body":{"index.html":{}}}],["needs",{"_index":263,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":478,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":590,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":502,"title":{},"body":{"index.html":{}}}],["nestjs,typescript",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs,typescript]'})@isoptional()@isarray()@isstring({each",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":272,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":470,"title":{},"body":{"index.html":{}}}],["npm",{"_index":484,"title":{},"body":{"index.html":{}}}],["number",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object}'})@isjson()@isoptional",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":568,"title":{},"body":{"index.html":{}}}],["official",{"_index":515,"title":{},"body":{"index.html":{}}}],["one",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":573,"title":{},"body":{"index.html":{}}}],["operations",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["option",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options.dto",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":218,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":220,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":221,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":595,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":438,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":350,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":360,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":252,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":255,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":558,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":266,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":261,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":271,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":258,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":269,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["platform",{"_index":513,"title":{},"body":{"index.html":{}}}],["please",{"_index":541,"title":{},"body":{"index.html":{}}}],["position",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post\",\"page\",\"story\",\"series",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":267,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":265,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:122",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:29",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:37",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:49",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:56",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:72",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:96",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":328,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":275,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":306,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":492,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":469,"title":{},"body":{"index.html":{}}}],["project",{"_index":482,"title":{},"body":{"index.html":{}}}],["properties",{"_index":106,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/user.service",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providers:[postsservice",{"_index":329,"title":{},"body":{"modules/PostsModule.html":{}}}],["public",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":539,"title":{},"body":{"index.html":{}}}],["read",{"_index":581,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":500,"title":{},"body":{"index.html":{}}}],["real",{"_index":554,"title":{},"body":{"index.html":{}}}],["refer",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["reflect",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":481,"title":{},"body":{"index.html":{}}}],["request",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":521,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":533,"title":{},"body":{"index.html":{}}}],["response",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":486,"title":{},"body":{"index.html":{}}}],["runs",{"_index":506,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":474,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serialized",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":475,"title":{},"body":{"index.html":{}}}],["setup",{"_index":483,"title":{},"body":{"index.html":{}}}],["side",{"_index":476,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":523,"title":{},"body":{"index.html":{}}}],["single",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spaces",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":253,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":576,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":466,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":422,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:20",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":430,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":259,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:21",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:33",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:44",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":327,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":331,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":333,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":335,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":250,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":270,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/user.service.ts",{"_index":339,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:18",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:39",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:9",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:46",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":420,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":488,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":491,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":493,"title":{},"body":{"index.html":{}}}],["started",{"_index":468,"title":{"index.html":{}},"body":{}}],["starter",{"_index":480,"title":{},"body":{"index.html":{}}}],["statements",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":561,"title":{},"body":{"index.html":{}}}],["steps",{"_index":503,"title":{},"body":{"index.html":{}}}],["story",{"_index":463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":519,"title":{},"body":{"index.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@patch",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfully",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":540,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":593,"title":{},"body":{"modules.html":{}}}],["table",{"_index":341,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["taggs",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":504,"title":{},"body":{"index.html":{}}}],["test",{"_index":337,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":498,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":497,"title":{},"body":{"index.html":{}}}],["tests",{"_index":494,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":575,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["this.postsservice.findall(userid",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":336,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":555,"title":{},"body":{"index.html":{}}}],["title",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["title'})@isstring()@minlength(4)@isnotempty",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["token",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":583,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":589,"title":{},"body":{"index.html":{}}}],["type",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["types",{"_index":273,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":479,"title":{},"body":{"index.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":495,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":600,"title":{},"body":{"properties.html":{}}}],["update",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":268,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":264,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":563,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["user.dto",{"_index":274,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":251,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":421,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":368,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":75,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["uses",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":358,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["validatenested",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["values'})@isenum(poststatus)@isnotempty",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":598,"title":{},"body":{"properties.html":{}}}],["video",{"_index":548,"title":{},"body":{"index.html":{}}}],["visit",{"_index":537,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":551,"title":{},"body":{"index.html":{}}}],["void",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":489,"title":{},"body":{"index.html":{}}}],["website",{"_index":587,"title":{},"body":{"index.html":{}}}],["without",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":536,"title":{},"body":{"index.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":565,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":579,"title":{},"body":{"index.html":{}}}],["you're",{"_index":499,"title":{},"body":{"index.html":{}}}],["z",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z0",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './providers/auth.service';\n\n@Module({\n  controllers: [AuthController],\n  imports: [forwardRef(() => UsersModule)],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UserService))\n    private readonly usersService: UserService,\n  ) {}\n  public login(email: string, password: string, id: string) {\n    //check user exists in in the database\n    const user = this.usersService.findOneById('1234');\n\n    //login\n\n    //return token\n    return 'SAMPLE TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'this a content of the post', example: 'post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'blogpost image', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values \"post\",\"page\",\"story\",\"series\" '})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'the date on which the blog post is published '})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{serialized object}'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example -  'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)&$/, {message: 'A slug  should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'refer to all possible values'})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'array of taggs passed as string values', example: '[nestjs,typescript]'})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'this is the title for the blogpost', example: 'this is a title'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  Min,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'this is the title for the blogpost',\n    example: 'this is a title',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: 'Possible values \"post\",\"page\",\"story\",\"series\" ',\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For example -  'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)&$/, {\n    message:\n      'A slug  should be all small letters and uses only \"-\" and without spaces. For example \"my-url',\n  })\n  slug: string;\n  @ApiProperty({\n    enum: postStatus,\n    description: 'refer to all possible values',\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'this a content of the post',\n    example: 'post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example: '{serialized object}',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'blogpost image',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'the date on which the blog post is published ',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn: Date;\n  @ApiPropertyOptional({\n    description: 'array of taggs passed as string values',\n    example: '[nestjs,typescript]',\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags: [];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'They key can be a string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: 'true',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@Matches(/[A-Z]/, {message: 'Password must be : Minimum eight characters, one number one letter, uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()  @IsNotEmpty()\n\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @Matches(/[A-Z]/, {\n    message:\n      'Password must be : Minimum eight characters, one number one letter, uppercase letter and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get users with specific Id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get users with specific Id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'the Id fot the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'the Id fot the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blogpost'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiTags('Posts')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update an existing blogpost'})@ApiResponse({status: 201, description: 'You get a 200 response if your post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  @ApiTags('Posts')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blogpost',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(@Body(new ValidationPipe()) createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n  }\n  @ApiOperation({\n    summary: 'Update an existing blogpost',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 200 response if your post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers:[PostsService],\n  imports:[UsersModule]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UserService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n    return [\n      {\n        user: user,\n        title: 'test title',\n        content: 'test content',\n      },\n      {\n        user: user,\n        title: 'test title 2',\n        content: 'test content 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:18\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Class to connect to users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * The method to get all the users from the database\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n    return [\n      {\n        firstName: 'John',\n        email: 'john@test.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@test.com',\n      },\n    ];\n  }\n  /**\n   * Find a single user using the ID of the user\n   */\n  public findOneById(id: string) {\n    return {\n      firstName: 'Alice',\n      email: 'alice@test.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched sucessfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number that you want the api to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly userService: UserService) {}\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched sucessfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'the position of the page number that you want the api to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.userService.findAll(getUserParamDto, limit, page);\n  }\n  @Post()\n  public createUsers(@Body(new ValidationPipe()) createUserDto: CreateUserDto) {\n    console.log(createUserDto instanceof CreateUserDto);\n    return 'You sent a post request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UserService],\n  exports: [UserService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
